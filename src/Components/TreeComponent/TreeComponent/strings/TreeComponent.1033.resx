<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root"
    xmlns=""
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TreeComponent_Display_Key" xml:space="preserve">
    <value>Tree Component</value>
    <comment>TreeComponent display name</comment>
  </data>
  <data name="TreeComponent_Desc_Key" xml:space="preserve">
    <value>Allow users to select multiple hierchical items imbedded inside a tree</value>
    <comment>Display text for TreeComponent description</comment>
  </data>
  <data name="treeParentEntityAttribute_Display_Key" xml:space="preserve">
    <value>Tree Entity Parent attribute</value>
    <comment>Display text for tree entity parent attribute logical name</comment>
  </data>
  <data name="treeParentEntityAttribute_Desc_Key" xml:space="preserve">
    <value>The logical name of the lookup field on the child that looks up to the parent of the entity</value>
    <comment>Description text for tree entity parent attribute logical name</comment>
  </data>
  <data name="treeEntityName_Display_Key" xml:space="preserve">
    <value>Tree Entity Name</value>
    <comment>Display text for the name of the tree entity</comment>
  </data>
  <data name="treeEntityCollectionName_Desc_Key" xml:space="preserve">
    <value>Logical name of the entity that contains data for building the tree</value>
    <comment>Description text for Tree Entity Collection Name</comment>
  </data>
  <data name="treeNameAttribute_Display_key" xml:space="preserve">
    <value>Tree Entity Name attribute</value>
    <comment>Display text for the name of the record</comment>
  </data>
  <data name="treeNameAttribute_Desc_key" xml:space="preserve">
    <value>The logical name of the Name attribute for the tree entity</value>
    <comment>Description text for Name Attribute</comment>
  </data>
  <data name="descriptionAttribute_Display_Key" xml:space="preserve">
    <value>Tree Entity Description attribute</value>
    <comment>Display text for the description of the record</comment>
  </data>
  <data name="descriptionAttribute_Desc_Key" xml:space="preserve">
    <value>The logical name of the Description attribute for the tree entity</value>
    <comment>Description text for description Attribute</comment>
  </data>
  <data name="extraTitleDetailsAttribute_Display_Key" xml:space="preserve">
    <value>Tree Entity Extra Title Details attribute</value>
    <comment>Display text for the extra title details of the record</comment>
  </data>
  <data name="extraTitleDetailsAttribute_Desc_Key" xml:space="preserve">
    <value>The logical name of the Extra Title Details attribute for the tree entity</value>
    <comment>Description text for Extra Title Details Attribute</comment>
  </data>
  <data name="isCheckableAttribute_Display_Key" xml:space="preserve">
    <value>Tree Entity Is Checkable attribute</value>
    <comment>Display text for the Is Checkable attribute</comment>
  </data>
  <data name="isCheckableAttribute_Desc_Key" xml:space="preserve">
    <value>The logical name of the Is Checkable attribute for the tree entity</value>
    <comment>Description text for the Is Checkable Attribute</comment>
  </data>
  <data name="maxNameDisplayLength_Display_Key" xml:space="preserve">
    <value>Tree Max Name Display Length</value>
    <comment>Display text for the Max Name Display Length</comment>
  </data>
  <data name="maxNameDisplayLength_Desc_Key" xml:space="preserve">
    <value>The max lengh of the name you will see in the drop down of the tree</value>
    <comment>Description text for the Max Name Display Length</comment>
  </data>
  <data name="idAttribute_Display_Key" xml:space="preserve">
    <value>Tree Entity Id attribute</value>
    <comment>Display text for Tree Entity Id</comment>
  </data>
  <data name="idAttribute_Desc_Key" xml:space="preserve">
    <value>The logical name of the Id attribute for the tree entity</value>
    <comment>Display text for Tree Entity Id</comment>
  </data>
  <data name="relationshipName_Display_Key" xml:space="preserve">
    <value>Relationship Name</value>
    <comment>Display text for Relationship Name</comment>
  </data>
  <data name="relationshipName_Desc_Key" xml:space="preserve">
    <value>Relationship name between the primary entity and the related entity</value>
    <comment>Display text for Relationship Name description</comment>
  </data>
  <data name="relationshipEntity_Display_Key" xml:space="preserve">
    <value>Relationship Entity</value>
    <comment>Display text for Relationship Entity</comment>
  </data>
  <data name="relationshipEntity_Desc_Key" xml:space="preserve">
    <value>Logical name of the relationship entity</value>
    <comment>Display text for Relationship Entity description</comment>
  </data>
  <data name="pleaseSelect" xml:space="preserve">
    <value>Please Select...</value>
    <comment>Display text to select an item in the tree</comment>
  </data>
  <data name="createRecord" xml:space="preserve">
    <value>Create the record first to have access</value>
    <comment>Display text telling to create the record before you can use the PCF</comment>
  </data>
</root>